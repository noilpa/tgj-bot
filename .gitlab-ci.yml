image: golang:1.12-alpine

variables:
  DOCKER_REGISTRY: registry.itv.restr.im:5000
  IMAGE_DIR: new-cache/tgj-bot
  POSTGRES_USER: tgj_bot_user
  POSTGRES_PASSWORD: tgj_bot_user
  POSTGRES_DB: tgj_bot_db
  DOCKER_TLS_CERTDIR: ''


before_script:
  - export IMAGE_NAME=${DOCKER_REGISTRY}/${IMAGE_DIR}:latest

services:
  - docker:dind
  - postgres:latest

stages:
  - test
  - build

connect:
  image: postgres
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

test:
  stage: test
  tags:
    - nc-office
  script:
    - apk add --no-cache git gcc musl-dev
    - go env
    - go install github.com/golang/mock/mockgen
    - go generate ./...
    - go build -o bin/tgj-bot ./cmd
    - go test ./...

build:
  stage: build
  tags:
    - nc-office
  image: docker:stable
  only:
    - master
  script:
    - docker build -t ${IMAGE_NAME} .
    - docker push ${IMAGE_NAME}
    - apk add curl
    - curl -X POST http://usnc.itv.restr.im/api/webhooks/abaeaab1-bcf7-4d92-b11d-487249b6740d
  when: manual
