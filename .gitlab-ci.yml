image: golang:1.12-alpine

variables:
  DOCKER_REGISTRY: registry.itv.restr.im:5000
  VERSION: 1.1.0
  IMAGE_DIR: new-cache/tgj-bot
  POSTGRES_USER: tgj_bot_user
  POSTGRES_PASSWORD: tgj_bot_user
  POSTGRES_DB: tgj_bot_db
  DOCKER_TLS_CERTDIR: ''
  DOCKER_HOST: tcp://localhost:2375/
  DOCKER_DRIVER: overlay2

before_script:
  - export IMAGE_NAME_WITH_VERSION=${DOCKER_REGISTRY}/${IMAGE_DIR}:${VERSION}
  - export IMAGE_NAME_LATEST=${DOCKER_REGISTRY}/${IMAGE_DIR}:latest

services:
  - docker:dind
  - postgres:latest

stages:
  - test
  - build

connect:
  image: postgres
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

test:
  stage: test
  tags:
    - wink-shared
  script:
    - apk add --no-cache git gcc musl-dev gcc-c++ make
    - go env
    - go install github.com/golang/mock/mockgen
    - go generate ./...
    - make build
    - make tests

build:
  stage: build
  tags:
    - wink-shared
  image: docker:stable
  only:
    - master
  script:
    - docker build -t ${IMAGE_NAME_WITH_VERSION} .
    - docker push ${IMAGE_NAME_WITH_VERSION}
    - docker tag ${IMAGE_NAME_WITH_VERSION} ${IMAGE_NAME_LATEST}
    - docker push ${IMAGE_NAME_LATEST}
    - apk add curl
    - curl -X POST http://usnc.itv.restr.im/api/webhooks/2b2e0f41-57fc-4330-b75a-62d9fe657522
  when: manual
