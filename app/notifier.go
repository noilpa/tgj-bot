package app

import (
	"fmt"
	"log"
	"math/rand"
	"time"

	ce "tgj-bot/custom_errors"

	"github.com/go-telegram-bot-api/telegram-bot-api"
)

const (
	greeting = "üöÄ Daily notification üåû"
	cutoff   = "-----------------------"
)

var (
	pointEmoji = []string{"üîπ", "üî∏"}
	sadEmoji   = []string{"üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä", "üòã", "üòé", "‚ò∫", "Ô∏èüôÇ", "ü§ó", "ü§î", "üòê",
		"üòë", "üò∂", "üôÑ", "üòè", "üò£", "üò•", "üòÆ", "ü§ê", "üòØ", "üò™", "üò´", "üò¥", "üòå", "üòõ", "üòú", "üòù", "ü§§", "üòí", "üòì",
		"üòî", "üòï", "üôÉ", "ü§ë", "üò≤", "‚òπ", "Ô∏èüôÅ", "üòñ", "üòû", "üòü", "üò§", "üò¢", "üò≠", "üò¶", "üòß", "üò®", "üò©"}
	joyEmoji = []string{"üòâ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "‚ò∫", "Ô∏èüòä", "üòá", "üôÇ", "üôÉ", "üòâ", "üòå", "üòç", "üòò",
		"üòó", "üòô", "üòö", "üòã", "üòú", "üòú", "üòù", "üòõ", "ü§ë", "ü§ó", "üòé", "ü§°", "ü§†", "üòè", "üëê", "üò∏", "üòπ", "üëª", "üò∫", "üôå",
		"üëè", "üôè", "ü§ù", "üëç", "üëä", "‚úä", "ü§û", "‚úå", "Ô∏èü§ò", "üëà", "üëâ", "üí™", "ü§ô", "üëã", "üññ", "üëë", "üåö", "üåù", "‚≠ê", "Ô∏èüí´"}
)

func (a *App) notify() {
	//
	// —Å–ª–∞—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è Time
	// –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –ª–∞–π–∫–∏ –∏ –∫–æ–º–µ–Ω—Ç—ã –∑–∞ –≤—Ä–µ–º—è Delay
	// –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –ª–∞–π–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
	//
	if !a.Config.Notifier.IsAllow {
		log.Println("Notifications does not allow in config")
	}
	go func() {
		var curDay time.Weekday
		var newDay time.Weekday
		var isNotified bool
		for t := range time.Tick(time.Minute) {
			newDay = t.Weekday()
			if newDay != curDay {
				curDay = newDay
				isNotified = false
				if curDay == time.Saturday || curDay == time.Sunday {
					isNotified = true
				}
			}

			if t.Hour() >= a.Config.Notifier.TimeHour && t.Minute() >= a.Config.Notifier.TimeMinute && !isNotified {
				// main logic
				if err := a.updateReviews(); err != nil {
					log.Println(ce.Wrap(err, "notifier update reviews"))
					continue
				}

				us, err := a.DB.GetActiveUsers()
				if err != nil {
					log.Println(ce.Wrap(err, "notifier update reviews"))
					continue
				}
				log.Printf("Notifier active users %v", us)

				messagesCount := 0
				msg := greeting + "\n"
				for _, u := range us {
					mrStr, err := a.buildNotifierMRString(u.ID)
					if err != nil {
						log.Println(ce.Wrap(err, "notifier update reviews"))
						continue
					}
					log.Printf("Notifier MR string for user %d: %v\n", u.ID, mrStr)

					if mrStr != "" {
						msg += fmt.Sprintf("%s\n@%s %s\n%s", cutoff, u.TelegramUsername, randSadEmoji(), mrStr)
						messagesCount++
					}
				}
				if messagesCount == 0 {
					msg += "\n" + praise()
				} else {
					msg += "\n" + motivate()
				}
				log.Println(a.sendTgMessage(msg))
				isNotified = true
			}
		}
	}()

}

func (a *App) sendTgMessage(msg string) (err error) {
	if m, err := a.Telegram.Bot.Send(tgbotapi.NewMessage(a.Config.Tg.ChatID, msg)); err != nil {
		log.Printf("Couldn't send message '%v': %v", m, err)
	}
	return
}

func (a *App) buildNotifierMRString(uID int) (s string, err error) {
	rs, err := a.DB.GetOpenedReviewsByUserID(uID)
	if err != nil {
		err = ce.WrapWithLog(err, "notifier build message")
		return
	}
	log.Printf("User %d opened reviews: %v\n", uID, rs)

	for i, r := range rs {
		if time.Now().Unix() > r.UpdatedAt+a.Config.Notifier.Delay {
			mr, err := a.DB.GetMrByID(r.MrID)
			if err != nil {
				err = ce.WrapWithLog(err, "notifier build message")
				return s, err
			}
			s += fmt.Sprintf("%s %s\n", pointEmoji[i%2], mr.URL)
		}
	}
	return
}

func randSadEmoji() string {
	return sadEmoji[rand.Intn(len(sadEmoji))]
}

func randJoyEmoji() string {
	return joyEmoji[rand.Intn(len(joyEmoji))]
}

func praise() string {
	templates := []string{
		"–ú–Ω–µ —Ç–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ —Ç–∞–∫–æ–π –æ—Ç—Ä–µ–≤—å—é–∏–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)",
		"–Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –æ—á–µ–Ω—å –ø–æ—Å—Ç–∞—Ä–∞–ª–∏—Å—å!",
		"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≤—å—é –∏ –¥–∞–π –±–æ–≥ –∑–¥–æ—Ä–æ–≤—å—è!",
		"–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å –≤ —Ä–µ–≤—å—é!",
		"–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
	}
	return templates[rand.Intn(len(templates))] + randJoyEmoji()
}

func motivate() string {
	templates := []string{
		"Just Do IT",
		"¬´–ù–µ –Ω–æ—à–∞ —Ç—è–Ω–µ—Ç –≤–∞—Å –≤–Ω–∏–∑, –∞ —Ç–æ, –∫–∞–∫ –≤—ã –µ–µ –Ω–µ—Å–µ—Ç–µ¬ª, ‚Äî –õ—É –•–æ–ª—å—Ü",
		"¬´–Ø –Ω–µ –±–æ—é—Å—å —É–º–µ—Ä–µ—Ç—å, –Ω–æ —è –±–æ—é—Å—å –Ω–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è¬ª, ‚Äî Jay Z",
		"¬´–ü—Ä–∏—Ç–≤–æ—Ä—è–π—Å—è, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! –î–µ–ª–∞–π –≤–∏–¥, —á—Ç–æ —Ç—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏—à—å, —á—Ç–æ —Ç–∞–∫ –æ–Ω–æ –∏ –µ—Å—Ç—å¬ª, ‚Äî –ë—Ä–∞–π–∞–Ω –¢—Ä–µ–π—Å–∏",
		"¬´–í—Å–µ–≥–¥–∞ –≤—ã–∫–ª–∞–¥—ã–≤–∞–π—Å—è –Ω–∞ –ø–æ–ª–Ω—É—é. –ß—Ç–æ –ø–æ—Å–µ–µ—à—å ‚Äî —Ç–æ –∏ –ø–æ–∂–Ω–µ—à—å¬ª, ‚Äî –û–≥ –ú–∞–Ω–¥–∏–Ω–æ",
	}
	return templates[rand.Intn(len(templates))] + randJoyEmoji()
}
